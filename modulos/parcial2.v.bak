
module parcial2 (clk, button, reset, LEDS, LEDS_DEC);

//entradas y salidas
input clk, button, reset;
output reg [7:0]LEDS;
output reg [7:0]LEDS_DEC;

//Registro para las veces que cuenta el pulsador
reg [7:0] count;
reg [7:0] count_dec;

//3 more registers used for debounce since the button will oscillate a few times when pressed
reg [24:0]counter_pressed, counter_not_pressed;
reg button_state = 1'b1;

//Valores iniciales a los registros, para evitar errores
initial begin
count <= 0;
count_dec <= 0;
counter_pressed <= 25'b0;
counter_not_pressed <= 25'b0;
end


//Each positive edge of the clock (50MHz in this case), we enter this part of code
always @ (posedge clk or negedge reset)
begin
	if(!reset)//Si se presiona el botón de reset
		begin
		count = 0;
		count_dec = 0;
		counter_pressed<= 25'b0;
		counter_not_pressed<= 25'b0;
		case (count)
			0: LEDS <= 8'b11000000;
		endcase
		case (count_dec)
			0: LEDS_DEC <= 8'b11000000;
		endcase
		end
	else
		begin
		//se presiona el boton and status is low we start counting	
		if(!button & !button_state)
			begin
			counter_pressed <= counter_pressed + 1'b1;		//cuenta
			end

		else
			begin
			counter_pressed <= 25'b0; //Sino, se resetea el contador
			end

		if(counter_pressed == 25'd2000000)//Cuando se alcanzan los 2M de pulsos, aumentamos el contador de pulsaciones en uno y reseteamos los demás
			begin
			count = count + 1;
			counter_pressed <= 25'b0;
			button_state = 1'b1;
				case (count)
				0: LEDS <= 8'b11000000;
				1: LEDS <= 8'b11111001;
				2: LEDS <= 8'b10100100;
				3: LEDS <= 8'b10110000;
				4: LEDS <= 8'b10011001;
				5: LEDS <= 8'b10010010;
				6: LEDS <= 8'b10000011;
				7: LEDS <= 8'b11111000;
				8: LEDS <= 8'b10000000;
				9: LEDS <= 8'b10011000;
				endcase
			end
			if(count > 9)
				begin
				count = 0;
				case (count)
				0: LEDS <= 8'b11000000;
				endcase
				count_dec = count_dec + 1;
				case (count_dec)
				0: LEDS_DEC <= 8'b11000000;
				1: LEDS_DEC <= 8'b11111001;
				2: LEDS_DEC <= 8'b10100100;
				3: LEDS_DEC <= 8'b10110000;
				4: LEDS_DEC <= 8'b10011001;
				5: LEDS_DEC <= 8'b10010010;
				6: LEDS_DEC <= 8'b10000011;
				7: LEDS_DEC <= 8'b11111000;
				8: LEDS_DEC <= 8'b10000000;
				9: LEDS_DEC <= 8'b10011000;
				endcase
			end
			if(count_dec == 9 & count == 9)
			begin
				button_state = 1'b1;
			end



		//Do the same for the positive part of button (button not pressed)
		if(button & button_state)
			begin
			counter_not_pressed <= counter_not_pressed + 1'b1;		
			end

		else
			begin
			counter_not_pressed <= 25'b0;
			end

		if(counter_not_pressed == 25'd2000000)
			begin
			counter_not_pressed <= 25'b0;
			button_state = 1'b0;
			end
		end//end of else of negative reset
end//end of always


//Finally, assign 8 bits from the counter to the 8 LEDs




endmodule 